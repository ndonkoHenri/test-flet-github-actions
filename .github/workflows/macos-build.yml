name: macOS Build 

on:
  # Runs on push to any of the below branches
  push:
    branches: 
      - apk

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # https://flet.dev/docs/publish#versioning
  BUILD_NUMBER: 1
  BUILD_VERSION: 1.0.0
  PYTHON_VERSION: 3.12.2
  FLUTTER_VERSION: 3.22.2

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Setup Flutter ${{ env.FLUTTER_VERSION }}
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}

    - name: Flet Build macOS
      run: |
        flutter config --no-analytics
        flet build macos --verbose --build-number=$BUILD_NUMBER --build-version=$BUILD_VERSION

    - name: Upload macOS Artifact
      uses: actions/upload-artifact@v4.3.4  # https://github.com/marketplace/actions/upload-a-build-artifact
      with:
        name: macos-build-artifact  # the name of the artifact
        path: build/macos  # location of Flet build output
        if-no-files-found: error  # Fail the action with an error message if no files are found
        overwrite: false  # If true, an artifact with a matching name will be deleted before a new one is uploaded. If false, the action will fail if an artifact for the given name already exists. Does not fail if the artifact does not exist.


  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Download the build output
      - name: Download build output
        uses: actions/download-artifact@v2
        with:
          name: build-output
          path: path/to/downloaded/build/output

      # Step 3: Create a release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 4: Upload the build artifact to the release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: path/to/downloaded/build/output
          asset_name: build-output.zip
          asset_content_type: application/zip

